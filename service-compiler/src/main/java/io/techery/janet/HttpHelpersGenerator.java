package io.techery.janet;


import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;

import io.techery.janet.body.ActionBody;
import io.techery.janet.body.BytesArrayBody;
import io.techery.janet.body.FileBody;
import io.techery.janet.body.util.StreamUtil;
import io.techery.janet.compiler.utils.Generator;
import io.techery.janet.compiler.utils.TypeUtils;
import io.techery.janet.converter.Converter;
import io.techery.janet.converter.ConverterException;
import io.techery.janet.http.annotations.*;
import io.techery.janet.http.model.Header;
import io.techery.janet.http.model.MultipartRequestBody;
import io.techery.janet.internal.TypeToken;
import org.apache.commons.lang.StringUtils;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.Filer;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.TypeParameterElement;

import io.techery.janet.util.ElementResolver;


public class HttpHelpersGenerator extends Generator<HttpActionClass> {
    static final String HELPER_SUFFIX = "Helper";
    private static final String BASE_HEADERS_MAP = "headers";
    private static final String PARENT_HELPER_FIELD_NAME = "parent";

    HttpHelpersGenerator(Filer filer, ElementResolver resolver) {
        super(filer);
        this.resolver = resolver;
    }

    @Override
    public void generate(ArrayList<HttpActionClass> actionClasses) {
        Set<TypeElement> processedElements = new HashSet<TypeElement>();
        for (HttpActionClass actionClass : actionClasses) {
            while (actionClass != null && !processedElements.contains(actionClass.getTypeElement())) {
                if (!actionClass.helperExists()) generateHelper(actionClass);
                processedElements.add(actionClass.getTypeElement());
                actionClass = actionClass.getParent();
            }
        }
    }

    private void generateHelper(HttpActionClass actionClass) {
        TypeSpec.Builder classBuilder = TypeSpec.classBuilder(actionClass.getHelperName().simpleName())
                .addModifiers(Modifier.PUBLIC)
                .addJavadoc("Janet compile time, autogenerated class, which fills actions")
                .addTypeVariables(getTypeVariables(actionClass.getTypeElement()))
                .addSuperinterface(ParameterizedTypeName.get(
                        ClassName.get(HttpActionService.ActionHelper.class), actionClass.getTypeName())
                );

        if (actionClass.getParent() != null) {
            TypeName parentType = actionClass.getParent().getHelperName();
            classBuilder.addField(parentType, PARENT_HELPER_FIELD_NAME, Modifier.PRIVATE, Modifier.FINAL);
            classBuilder.addMethod(
                    MethodSpec.constructorBuilder()
                            .addModifiers(Modifier.PUBLIC)
                            .addParameter(parentType, PARENT_HELPER_FIELD_NAME)
                            .addStatement("this.$L = $L", PARENT_HELPER_FIELD_NAME, PARENT_HELPER_FIELD_NAME)
                            .build()
            );
        }

        classBuilder.addMethod(createFillRequestMethod(actionClass));
        classBuilder.addMethod(createOnResponseMethod(actionClass));
        saveClass(actionClass.getPackageName(), classBuilder.build());
    }

    private MethodSpec createFillRequestMethod(HttpActionClass actionClass) {
        MethodSpec.Builder builder = MethodSpec.methodBuilder("fillRequest")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(RequestBuilder.class)
                .addException(ConverterException.class)
                .addParameter(RequestBuilder.class, "requestBuilder")
                .addParameter(TypeName.get(actionClass.getTypeElement().asType()), "action");
        if (actionClass.isAnnotatedClass()) {
            addRequestMethod(actionClass, builder);
            addRequestType(actionClass, builder);
            addRequestPath(actionClass, builder);
        }
        if (actionClass.getParent() != null) {
            builder.addStatement("$L.fillRequest(requestBuilder, action)", PARENT_HELPER_FIELD_NAME);
        }
        addRequestUrl(actionClass, builder);
        addPathParams(actionClass, builder);
        addParts(actionClass, builder);
        addRequestHeaders(actionClass, builder);
        addRequestFields(actionClass, builder);
        addRequestQueries(actionClass, builder);
        addRequestBody(actionClass, builder);
        builder.addStatement("return requestBuilder");
        return builder.build();
    }

    private void addRequestMethod(HttpActionClass actionClass, MethodSpec.Builder builder) {
        builder.addStatement("requestBuilder.setMethod($T.$L)", HttpAction.Method.class, actionClass.getMethod());
    }

    private void addRequestType(HttpActionClass actionClass, MethodSpec.Builder builder) {
        builder.addStatement("requestBuilder.setRequestType($T.$L)", HttpAction.Type.class, actionClass.getRequestType());
    }

    private void addRequestPath(HttpActionClass actionClass, MethodSpec.Builder builder) {
        if (actionClass.getPath() != null && actionClass.getPath().length() > 0) {
            builder.addStatement("requestBuilder.setPath($S)", actionClass.getPath());
        }
    }

    private void addRequestUrl(HttpActionClass actionClass, MethodSpec.Builder builder) {
        List<Element> elements = actionClass.getAnnotatedElements(Url.class);
        if (!elements.isEmpty()) {
            builder.addStatement("requestBuilder.setUrl(action.$L)", elements.get(0));
        }
    }

    private void addRequestFields(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(Field.class)) {
            Field annotation = element.getAnnotation(Field.class);
            String accessibleFieldName = resolver.resolveAccessibleFieldNameToRead(actionClass.getTypeElement(), element);
            CodeBlock codeBlock = CodeBlock.builder()
                    .addStatement("requestBuilder.addField($S, action.$L)", annotation.value(), accessibleFieldName)
                    .build();
            if (!TypeUtils.isPrimitive(element)) {
                codeBlock = wrapFieldNotNull(codeBlock, accessibleFieldName);
            }
            builder.addCode(codeBlock);
        }
    }

    private void addRequestQueries(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(Query.class)) {
            Query annotation = element.getAnnotation(Query.class);
            String accessibleFieldName = resolver.resolveAccessibleFieldNameToRead(actionClass.getTypeElement(), element);
            CodeBlock codeBlock = CodeBlock.builder().addStatement(
                    "requestBuilder.addQueryParam($S, action.$L, $L, $L)",
                    annotation.value(), accessibleFieldName, annotation.encodeName(), annotation.encodeValue()
            ).build();
            if (!TypeUtils.isPrimitive(element)) {
                codeBlock = wrapFieldNotNull(codeBlock, accessibleFieldName);
            }
            builder.addCode(codeBlock);
        }
    }

    private void addRequestBody(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(Body.class)) {
            builder.addStatement("requestBuilder.setBody(action.$L)", element);
            break;
        }
    }

    private void addRequestHeaders(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(RequestHeader.class)) {
            RequestHeader annotation = element.getAnnotation(RequestHeader.class);
            String accessibleFieldName = resolver.resolveAccessibleFieldNameToRead(actionClass.getTypeElement(), element);
            CodeBlock codeBlock = CodeBlock.builder()
                    .addStatement("requestBuilder.addHeader($S, String.valueOf(action.$L))", annotation.value(), accessibleFieldName)
                    .build();
            if (!TypeUtils.isPrimitive(element)) {
                codeBlock = wrapFieldNotNull(codeBlock, accessibleFieldName);
            }
            builder.addCode(codeBlock);
        }
    }

    private void addPathParams(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(Path.class)) {
            Path param = element.getAnnotation(Path.class);
            String accessibleFieldName = resolver.resolveAccessibleFieldNameToRead(actionClass.getTypeElement(), element);
            String path = param.value();
            String name = element.getSimpleName().toString();
            if (StringUtils.isEmpty(path)) {
                path = name;
            }
            boolean encode = param.encode();
            CodeBlock codeBlock = CodeBlock.builder()
                    .addStatement("requestBuilder.addPathParam($S, String.valueOf(action.$L), $L)", path, accessibleFieldName, encode)
                    .build();
            if (!TypeUtils.isPrimitive(element)) {
                codeBlock = wrapFieldNotNull(codeBlock, accessibleFieldName);
            }
            builder.addCode(codeBlock);
        }
    }

    private void addParts(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(Part.class)) {
            Part part = element.getAnnotation(Part.class);
            String accessibleFieldName = resolver.resolveAccessibleFieldNameToRead(actionClass.getTypeElement(), element);
            String partName = part.value();
            String name = element.getSimpleName().toString();
            if (StringUtils.isEmpty(partName)) {
                partName = name;
            }
            String encode = part.encoding();

            String bodyFieldName = "partBody";
            CodeBlock.Builder codeBlock = CodeBlock.builder();
            if (TypeUtils.equalType(element, MultipartRequestBody.PartBody.class)) {
                codeBlock.addStatement("$T $L = action.$L",
                        MultipartRequestBody.PartBody.class, bodyFieldName, accessibleFieldName
                );
            } else {
                String actionBodyFieldName = "actionBody";
                CodeBlock headerBlock = null;
                if (TypeUtils.equalType(element, byte[].class)) {
                    codeBlock.addStatement("$T $L = new $T($S, action.$L)",
                            ActionBody.class, actionBodyFieldName, BytesArrayBody.class, encode, accessibleFieldName);
                } else if (TypeUtils.equalType(element, String.class)) {
                    codeBlock.addStatement("$T $L = new $T($S, action.$L.getBytes())",
                            ActionBody.class, actionBodyFieldName, BytesArrayBody.class, encode, accessibleFieldName);
                } else if (TypeUtils.equalType(element, File.class)) {
                    codeBlock.addStatement("$T $L = new $T($S, action.$L)", ActionBody.class, actionBodyFieldName, FileBody.class, encode, accessibleFieldName);
                    headerBlock = CodeBlock.builder()
                            .add(".addHeader($S, action.$L.getName())", "filename", accessibleFieldName)
                            .build();
                } else if (TypeUtils.equalType(element, FileBody.class)) {
                    codeBlock.addStatement("$T $L = action.$L", ActionBody.class, actionBodyFieldName, accessibleFieldName);
                    headerBlock = CodeBlock.builder()
                            .add(".addHeader($S, action.$L.getFile().getName())", "filename", accessibleFieldName)
                            .build();
                } else {
                    codeBlock.addStatement("$T $L = action.$L", ActionBody.class, actionBodyFieldName, accessibleFieldName);
                }
                codeBlock.add("$[");
                codeBlock.add("$T $L = new $T().setBody($L)", MultipartRequestBody.PartBody.class, bodyFieldName, MultipartRequestBody.PartBody.Builder.class, actionBodyFieldName);
                if (headerBlock != null) codeBlock.add(headerBlock);
                codeBlock.add(".build()");
                codeBlock.add(";\n$]");
            }
            codeBlock.addStatement("requestBuilder.addPart($S, $S, $L)", partName, encode, bodyFieldName);
            builder.addCode(wrapFieldNotNull(codeBlock.build(), accessibleFieldName));
        }
    }

    private MethodSpec createOnResponseMethod(HttpActionClass actionClass) {
        MethodSpec.Builder builder = MethodSpec.methodBuilder("onResponse")
                .addModifiers(Modifier.PUBLIC)
                .addAnnotation(Override.class)
                .returns(ClassName.get(actionClass.getTypeElement().asType()))
                .addParameter(actionClass.getTypeName(), "action")
                .addParameter(io.techery.janet.http.model.Response.class, "response")
                .addParameter(Converter.class, "converter")
                .addException(ConverterException.class);
        if (actionClass.getParent() != null) {
            builder.addStatement("$L.onResponse(action, response, converter)", PARENT_HELPER_FIELD_NAME);
        }
        addStatusField(actionClass, builder);
        addResponses(actionClass, builder);
        addResponseHeaders(actionClass, builder);
        builder.addStatement("return action");
        return builder.build();
    }

    private void addResponses(HttpActionClass actionClass, MethodSpec.Builder builder) {
        List<Element> responseElements = actionClass.getAnnotatedElements(Response.class);
        for (Element element : responseElements) {
            Response annotation
                    = element.getAnnotation(Response.class);
            if (annotation.value() > 0) {
                builder.beginControlFlow("if (response.getStatus() == $L)", annotation.value());
                addResponseStatements(actionClass, builder, element);
                builder.endControlFlow();
            } else if (annotation.min() > 0 || annotation.max() > 0) {
                StringBuilder controlFlow = new StringBuilder("if(");
                if (annotation.min() > 0) {
                    controlFlow.append("response.getStatus() >= ").append(annotation.min());
                    if (annotation.max() > 0) {
                        controlFlow.append(" && ");
                    }
                }
                if (annotation.max() > 0) {
                    controlFlow.append("response.getStatus() <= ").append(annotation.max());
                }
                controlFlow.append(")");
                builder.beginControlFlow(controlFlow.toString());
                addResponseStatements(actionClass, builder, element);
                builder.endControlFlow();
            } else if (annotation.value() == Response.ERROR) {
                builder.beginControlFlow("if (!response.isSuccessful())");
                addResponseStatements(actionClass, builder, element);
                builder.endControlFlow();
            } else {
                builder.beginControlFlow("if (response.isSuccessful())");
                addResponseStatements(actionClass, builder, element);
                builder.endControlFlow();
            }
        }
    }

    private void addResponseStatements(HttpActionClass actionClass, MethodSpec.Builder builder, Element element) {
        String fieldAddress = getFieldAddress(actionClass, element);
        if (TypeUtils.equalType(element, ActionBody.class)) {
            builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "response.getBody()"));
        } else if (TypeUtils.equalType(element, String.class)) {
            builder
                    .beginControlFlow("try")
                    .addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "$T.convertToString(response.getBody().getContent())"), StreamUtil.class)
                    .nextControlFlow("catch($T e)", IOException.class)
                    .addStatement("throw $T.forDeserialization(e)", ConverterException.class)
                    .endControlFlow();
        } else {
            builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "($T) converter.fromBody(response.getBody(), new $T<$T>(){}.getType())"),
                    element.asType(), TypeToken.class, element.asType());
        }
    }

    private void addResponseHeaders(HttpActionClass actionClass, MethodSpec.Builder builder) {
        if (actionClass.getAnnotatedElements(ResponseHeader.class).isEmpty()) {
            return;
        }
        builder.beginControlFlow("for ($T header : response.getHeaders())", Header.class);
        for (Element element : actionClass.getAnnotatedElements(ResponseHeader.class)) {
            ResponseHeader annotation = element.getAnnotation(ResponseHeader.class);
            String fieldAddress = getFieldAddress(actionClass, element);
            builder.beginControlFlow("if ($S.equals(header.getName()))", annotation.value());
            builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "header.getValue()"));
            builder.endControlFlow();
        }
        builder.endControlFlow();

    }

    private void addStatusField(HttpActionClass actionClass, MethodSpec.Builder builder) {
        for (Element element : actionClass.getAnnotatedElements(Status.class)) {
            String fieldAddress = getFieldAddress(actionClass, element);
            if (TypeUtils.containsType(element, Boolean.class, boolean.class)) {
                builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "response.isSuccessful()"));
            } else if (TypeUtils.containsType(element, Integer.class, int.class, long.class)) {
                builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "($T) response.getStatus()"), element.asType());
            } else if (TypeUtils.equalType(element, String.class)) {
                builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "Integer.toString(response.getStatus())"));
            } else if (TypeUtils.containsType(element, Long.class)) {
                builder.addStatement(fieldAddress + resolver.resolveAccessibleFieldNameToWrite(actionClass.getTypeElement(), element, "(long) response.getStatus()"));
            }
        }
    }

    private static String getFieldAddress(HttpActionClass actionClass, Element element) {
        String address;
        if (actionClass.getTypeElement().equals(element.getEnclosingElement())) {
            address = "action.";
        } else {
            address = String.format("((%s)action).", element.getEnclosingElement());
        }
        return address;
    }

    private static CodeBlock wrapFieldNotNull(CodeBlock code, String fieldName) {
        return CodeBlock.builder()
                .beginControlFlow("if (action.$L != null)", fieldName)
                .add(code)
                .endControlFlow()
                .build();
    }

    private static Iterable<TypeVariableName> getTypeVariables(TypeElement element) {
        List<TypeVariableName> typeVariables = new ArrayList<TypeVariableName>();
        for (TypeParameterElement type : element.getTypeParameters()) {
            typeVariables.add((TypeVariableName) TypeVariableName.get(type.asType()));
        }
        return typeVariables;
    }

    private final ElementResolver resolver;
}
